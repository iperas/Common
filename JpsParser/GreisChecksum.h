#ifndef GreisChecksum_h__
#define GreisChecksum_h__

#include "GreisTypes.h"

namespace Greis
{
    class ChecksumChecker
    {
        // 8-bit checksum
    private:
        enum 
        {
            bits = 8,
            lShift = 2,
            rShift = bits - lShift
        };

        static inline Types::u1 ROT_LEFT(Types::u1 val) { return ((val << lShift) | (val >> rShift)); }
        //static inline Types::u1 ROT_LEFT(Types::u1 val) { return val; }

    public:
        static Types::u1 cs8(void const* source, int count, Types::u1 initVal = 0)
        {
            Types::u1 const* src = (Types::u1 const*)source;
            // empty array
            if (count == 0)
            {
                return initVal;
            }
            // initialize
            Types::u1 res = 0;
            if (initVal != 0)
            {
                // ROT_LEFT was on previous step (in return statement)
                res = initVal ^ *src++;
                --count;
            }
            // act
            while(count--)
                res = ROT_LEFT(res) ^ *src++;
            return ROT_LEFT(res);
        }

        // 16-bit CRC
        typedef unsigned short Crc16;

    private:
        enum
        {
            WIDTH = 16,                     // Width of poly
            POLY = 0x1021,                  // Poly. Bit #16 is set and hidden
            BYTE_BITS = 8,                  // Number of bits in byte
            TABLE_SIZE = 1 << BYTE_BITS,    // Size of table
            MSB_MASK = 1 << (WIDTH - 1)     // Mask for high order bit in a word
        };

        // Table (generated by 'crc16init()')
        static Crc16* table()
        {
            static Crc16 aTable[TABLE_SIZE];
            static bool firstCall = true;
            if (firstCall)
            {
                crc16init(aTable);
                firstCall = false;
            }
            return aTable;
        }

        // Initializes the table. Should be called once before the first
        // call to 'crc16()'
        static void crc16init(Crc16* table)
        {
            Crc16 i;
            for(i = 0; i < TABLE_SIZE; ++i)
            {
                Crc16 val = i << (WIDTH - BYTE_BITS);
                int j;
                for(j = 0; j < BYTE_BITS; ++j)
                    val = (val << 1) ^ ((val & MSB_MASK) ? POLY : 0);
                table[i] = val;
            }
        }

    public:
        // Calculates CRC16 of 'cnt' bytes from 'src' and returns result.
        // Initial value of CRC16 is supplied by caller in 'crc'.
        static Crc16 crc16(void const* src, int cnt, Crc16 crc = 0)
        {
            unsigned char const* s = (unsigned char const*)src;
            while(cnt--)
            {
                crc = (crc << BYTE_BITS) ^ table()[(crc >> (WIDTH - BYTE_BITS)) ^ *s++];
            }
            return crc;
        }
    };
}

#endif // GreisChecksum_h__